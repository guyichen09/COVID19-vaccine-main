knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(igraph)
library(vosonSML)
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_dh(.), ## Davidson and Harel graph layout
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Take out a giant component from the graph
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which.max(comp$csize)))
# Calculate the number of components in the graph
comp <- components(actorGraph)
########################
# Save your data
########################
# The following command saves your R environment as RData
# Please submit this RData on Canvas
save.image('Lab1_Descriptive.RData')
# Calculate the number of components in the graph
load('Lab1_Descriptive.RData')
comp <- components(actorGraph)
actorGraph <- edge_cleanup() # Runs the function to remove self-loops
edge_cleanup <- function(graph = actorGraph){
library(igraph)
df <- get.data.frame(actorGraph)
names_list <- data.frame('name' = as.character(V(actorGraph)$name),
'label' = as.character(V(actorGraph)$label))
df$from <- sapply(df$from, function(x) names_list$label[match(x,names_list$name)] %>% as.character())
df$to <- sapply(df$to, function(x) names_list$label[match(x,names_list$name)] %>% as.character())
nodes <- data.frame(sort(unique(c(df$from,df$to))))
links <- df[,c('from','to')]
net <- graph.data.frame(links, nodes, directed=T)
E(net)$weight <- 1
net <- igraph::simplify(net,edge.attr.comb="sum")
return(net)
}
actorGraph <- edge_cleanup() # Runs the function to remove self-loops
myThreadUrls <- c("https://www.reddit.com/r/television/comments/q05yra/squid_game_no1_tv_show_in_90_countries/","https://www.reddit.com/r/television/comments/px8091/squid_game_the_hellish_horrorshow_taking_the/")
# authentication does not require credentials
redditData <- Authenticate("reddit") %>%
Collect(threadUrls = myThreadUrls, waitTime = 5, maxComments = 500)
View(redditData)
actorGraph <- redditData %>% Create("actor") %>% AddText(redditData) %>% Graph
edge_cleanup <- function(graph = actorGraph){
library(igraph)
df <- get.data.frame(actorGraph)
names_list <- data.frame('name' = as.character(V(actorGraph)$name),
'label' = as.character(V(actorGraph)$label))
df$from <- sapply(df$from, function(x) names_list$label[match(x,names_list$name)] %>% as.character())
df$to <- sapply(df$to, function(x) names_list$label[match(x,names_list$name)] %>% as.character())
nodes <- data.frame(sort(unique(c(df$from,df$to))))
links <- df[,c('from','to')]
net <- graph.data.frame(links, nodes, directed=T)
E(net)$weight <- 1
net <- igraph::simplify(net,edge.attr.comb="sum")
return(net)
}
actorGraph <- edge_cleanup() # Runs the function to remove self-loops
# check if the network is directed or undirected
is.directed(actorGraph)
# calculate the density of the network
graph.density(actorGraph)
########################
# Save your data
########################
# The following command saves your R environment as RData
# Please submit this RData on Canvas
save.image('Lab1_Descriptive.RData')
# Calculate the number of components in the graph
load('Lab1_Descriptive.RData')
comp <- components(actorGraph)
comp
# Plot a graph
# For a more detailed tutorial of network visualization, see https://kateto.net/network-visualization
# To open documentation in RStudio, run:
help("igraph.plotting")
# Below, actorGraph is the name of the network object we are passing to the plot command using "%>%'
actorGraph %>%
plot(.,
# Plot margins:
# margin = c(0,0,0,0),           ## values for the size of the bottom, left, top, and right plot margins
#      While 0 is the default, negative values can cut down on margins and
#      help make the plot bigger. Just make sure you don't cut anything off
margin = c(-0.3,-0.3,-0.3,-0.3),
# Settings for nodes:
vertex.size = 3,               ## node size
vertex.color = 'red',           ## node color
# Settings for node labels:
vertex.label = NA,           ## uncomment  this line to remove node labels
vertex.label.cex = .4,          ## node label size
vertex.label.color = 'gray19',  ## node label color
# Settings for edges:
edge.arrow.size = .8,           ## arrow size
edge.color = 'gray30',          ## arrow color
# Settings for layouts:
#      Running this command multiple times will produce slightly different networks,
#      based on the layout algorithm used. You can swap alogrithms by uncommenting one of the
#      lines below. Which alogrithm works best often depends on the data
# layout = layout_nicely(.)      ## Automated layout recommendation from iGraph
# layout = layout_with_fr(.)    ## Fruchterman-Reingold algorithm
# layout = layout_with_dh(.)    ## Davidson and Harel algorithm
# layout = layout_with_drl(.)   ## Force-directed algorithm
# layout = layout_with_kk(.)    ## Spring algorithm
# layout = layout_with_lgl(.)   ## Large graph layout
)
# Take out a giant component from the graph
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which.max(comp$csize)))
vcount(giantGraph) ## the number of nodes/actors/users
ecount(giantGraph) ## the number of edges
# Plot a graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_drl(.), ## force-directed graph layout
edge.arrow.size = .3,
vertex.label = NA,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_dh(.), ## Davidson and Harel graph layout
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_fr(.), ## Davidson and Harel graph layout
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_kk(.), ## Davidson and Harel graph layout
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_lgl(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_nicely(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_nicely(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_mds(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_kk(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_dh(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_dh(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
#vertex.label.cex = .5,
#vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_dh(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
#vertex.label.cex = .5,
#vertex.label.color = 'black'
)
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_dh(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
#vertex.label.color = 'black'
)
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout =layout_with_dh(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label = NA,
vertex.label.cex = .5,
vertex.label.color = 'black'
)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("~/Documents/covid_wastewater_project/COVID19-vaccine-main/COVID19-vaccine-main-LP-efficiency/VaccineAllocation")
knitr::opts_chunk$set(echo = TRUE)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
plot(py_toiht.PY)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
plot(py_toiht.PY)
plot(py_toiht[PY], py_toiht[ToIHT])
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
plot(py_toiht[PY], py_toiht[ToIHT])
plot(PY, ToIHT)
plot(py_toiht$PY, py_toiht$ToIHT)
model <- lm(ToIHT ~ PY, data = py_toiht)
#use model to create prediction intervals
predictions <- predict(model, interval = "predict")
#create dataset that contains original data along with prediction intervals
all_data <- cbind(data, predictions)
#load ggplot2 library
library(ggplot2)
#create plot
ggplot(all_data, aes(x = PY, y = ToIHT)) + #define x and y axis variables
geom_point() + #add scatterplot points
stat_smooth(method = lm) + #confidence bands
geom_line(aes(y = lwr), col = "coral2", linetype = "dashed") + #lwr pred interval
geom_line(aes(y = upr), col = "coral2", linetype = "dashed") #upr pred interval
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
model <- lm(ToIHT ~ PY, data = py_toiht)
#use model to create prediction intervals
predictions <- predict(model, interval = "predict")
#create dataset that contains original data along with prediction intervals
all_data <- cbind(data, predictions)
#load ggplot2 library
library(ggplot2)
#create plot
ggplot(all_data, aes(x = PY, y = ToIHT)) + #define x and y axis variables
geom_point() + #add scatterplot points
stat_smooth(method = lm) + #confidence bands
geom_line(aes(y = lwr), col = "coral2", linetype = "dashed") + #lwr pred interval
geom_line(aes(y = upr), col = "coral2", linetype = "dashed") #upr pred interval
model <- lm(ToIHT ~ PY, data = py_toiht)
#use model to create prediction intervals
predictions <- predict(model, interval = "predict")
#create dataset that contains original data along with prediction intervals
all_data <- cbind(py_toiht, predictions)
#load ggplot2 library
library(ggplot2)
#create plot
ggplot(all_data, aes(x = PY, y = ToIHT)) + #define x and y axis variables
geom_point() + #add scatterplot points
stat_smooth(method = lm) + #confidence bands
geom_line(aes(y = lwr), col = "coral2", linetype = "dashed") + #lwr pred interval
geom_line(aes(y = upr), col = "coral2", linetype = "dashed") #upr pred interval
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/covid_wastewater_project/COVID19-vaccine-main/COVID19-vaccine-main-LP-efficiency/VaccineAllocation")
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
plot(py_toiht$PY, py_toiht$ToIHT)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
knitr::opts_chunk$set(echo = TRUE)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
plot(py_toiht$PY, py_toiht$ToIHT)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
plot(py_toiht$PY, py_toiht$ToIHT)
py_toiht <- read.csv(file = './py_toiht.csv',  fileEncoding = "Latin1", check.names = F)
colnames(py_toiht) <- c("PY", "ToIHT" )
plot(py_toiht$PY, py_toiht$ToIHT)
model <- lm(ToIHT ~ PY, data = py_toiht)
#use model to create prediction intervals
predictions <- predict(model, interval = "predict")
#create dataset that contains original data along with prediction intervals
all_data <- cbind(py_toiht, predictions)
#load ggplot2 library
library(ggplot2)
#create plot
ggplot(all_data, aes(x = PY, y = ToIHT)) + #define x and y axis variables
geom_point() + #add scatterplot points
stat_smooth(method = lm) + #confidence bands
geom_line(aes(y = lwr), col = "coral2", linetype = "dashed") + #lwr pred interval
geom_line(aes(y = upr), col = "coral2", linetype = "dashed") #upr pred interval
model <- lm(ToIHT ~ PY, data = py_toiht)
summary(model)
#use model to create prediction intervals
predictions <- predict(model, interval = "predict")
#create dataset that contains original data along with prediction intervals
all_data <- cbind(py_toiht, predictions)
#load ggplot2 library
library(ggplot2)
#create plot
ggplot(all_data, aes(x = PY, y = ToIHT)) + #define x and y axis variables
geom_point() + #add scatterplot points
stat_smooth(method = lm) + #confidence bands
geom_line(aes(y = lwr), col = "coral2", linetype = "dashed") + #lwr pred interval
geom_line(aes(y = upr), col = "coral2", linetype = "dashed") #upr pred interval
